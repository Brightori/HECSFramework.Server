namespace HECSFramework.Core{	public partial class MaskProvider	{		public MaskProvider()		{			GetPlus = GetPlusFunc;			GetMinus = GetMinusFunc;			Empty = GetEmptyMaskFunc;			Contains = ContainsFunc;			GetMaskIsEqual = GetEqualityOfMasksFunc;			GetMaskHashCode = GetHashCodeFunc;		}		public HECSMask GetEmptyMaskFunc()		{			return new HECSMask			{				Index = -999,				Mask01 = 0,			};		}		public HECSMask GetPlusFunc(HECSMask l, HECSMask r)		{			return new HECSMask			{				Mask01 = l.Mask01 | r.Mask01,			};		}		public HECSMask GetMinusFunc(HECSMask l, HECSMask r)		{			return new HECSMask			{				Mask01 = l.Mask01 ^ r.Mask01,			};		}		public bool GetEqualityOfMasksFunc(ref HECSMask mask, object other)		{			return other is HECSMask otherMask && mask.Mask01 == otherMask.Mask01;		}		public int GetHashCodeFunc(ref HECSMask mask)		{			unchecked			{				int hash = 256;				hash += (3 * mask.Mask01.GetHashCode());				return hash;			}		}		public bool ContainsFunc(ref HECSMask original, ref HECSMask other)		{			return (original.Mask01 & other.Mask01) != 0;		}	}#pragma warning disable	public partial struct HECSMask	{	}#pragma warning enable}