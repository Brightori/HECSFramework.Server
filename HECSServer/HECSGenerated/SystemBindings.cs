using Commands;namespace HECSFramework.Core{	public partial class RegisterService	{		partial void BindSystem(ISystem system)		{			if (system is IReactGlobalCommand<AddNetWorkComponentCommand> AddNetWorkComponentCommandGlobalCommandsReact)				system.Owner.World.AddGlobalReactCommand<AddNetWorkComponentCommand>(system, AddNetWorkComponentCommandGlobalCommandsReact.CommandGlobalReact);			if (system is IReactGlobalCommand<RemoveNetWorkComponentCommand> RemoveNetWorkComponentCommandGlobalCommandsReact)				system.Owner.World.AddGlobalReactCommand<RemoveNetWorkComponentCommand>(system, RemoveNetWorkComponentCommandGlobalCommandsReact.CommandGlobalReact);			if (system is IReactGlobalCommand<InitNetworkSystemCommand> InitNetworkSystemCommandGlobalCommandsReact)				system.Owner.World.AddGlobalReactCommand<InitNetworkSystemCommand>(system, InitNetworkSystemCommandGlobalCommandsReact.CommandGlobalReact);			if (system is IReactCommand<ExecuteActiveAbilityCommand> ExecuteActiveAbilityCommandCommandsReact)				system.Owner.EntityCommandService.AddListener<ExecuteActiveAbilityCommand>(system, ExecuteActiveAbilityCommandCommandsReact.CommandReact);			if (system is IReactCommand<InitNetworkSystemCommand> InitNetworkSystemCommandCommandsReact)				system.Owner.EntityCommandService.AddListener<InitNetworkSystemCommand>(system, InitNetworkSystemCommandCommandsReact.CommandReact);			if (system is IReactCommand<RemoveClientCommand> RemoveClientCommandCommandsReact)				system.Owner.EntityCommandService.AddListener<RemoveClientCommand>(system, RemoveClientCommandCommandsReact.CommandReact);		}	}}